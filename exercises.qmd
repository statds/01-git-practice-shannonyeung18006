# Exercises

1. Pick up Git basics and set up an account at GitHub if you don't have
   one. Please practice the tips on Git in the notes. Make sure you have at
   least 10 commits in the repo, each with informative message. Keep checking
   the status of your repo with `git status`. My grader will grade the repo.
    1. Clone the `ids-s23` repo to your own computer.
    1. Add your name and wishes to the Wishlist; commit with an informative message.
	1. Remove the `Last, First` entry from the list; commit.
	1. Create a new file called `add.qmd` containing a few lines of texts; commit.
	1. Remove `add.qmd` (pretending that this is by accident; commit.
    1. Recover the accidently removed file `add.qmd`; add a long line (a
       paragraph without a hard break); add a short line (under 80 characters);
       commit.
    1. Change one word in the long line and one word in the short line; commit.
	1. Use `git diff` to see the difference between the last two commits.
	1. Put the repo into the GitHub Classroom homework repo with `git remote add` and `git push`.

1. Get ready for contributing to the classnotes.
    1. Create a fork of the `ids-s23` repo into your own GitHub account. 
	1. Clone it to your local computer. 
	1. Make a new branch to experiment with your changes.
	1. Checkout your branch and add your wishes to the wish list; push to your
       GitHub account.
    1. Make a pull request to my `ids-s23` repo from your fork at GitHub. Make
       sure you have clear messages to document the changes.

1. Write a function to demonstrate the Monty Hall problem through
   simulation. The function takes two arguments `ndoors` and
   `ntrials`, representing the number of doors in the experiment and
   the number of trails in a simulation, respectively. The function
   should return the proportion of wins for both the switch and
   no-switch strategy. Apply your function with 3 doors and 5 doors,
   both with 1000 trials. Include sufficient text around the code to explain
   your them.

1. Write a function to do a Monte Carlo approximation of $\pi$. The
   function takes a Monte Carlo sample size `n` as input, and returns
   a point estimate of $\pi$ and a 95% confidence interval. Apply your
   function with sample size 1000, 2000, 4000, and 8000. Comment on
   the results.

1. Find the first 10-digit prime number occurring in consecutive
   digits of $e$. This was a
   [Google recruiting ad](http://mathworld.wolfram.com/news/2004-10-13/google/)
